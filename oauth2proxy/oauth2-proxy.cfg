## <addr>:<port> to listen on for HTTP/HTTPS clients
http_address = "0.0.0.0:4180"
#https_address = "0.0.0.0:4443"

## Provider setting
provider = "oidc"
provider_display_name = "Keycloak"
oidc_issuer_url = "http://keycloak.localhost.com:8080/auth/realms/dev_oauth2proxy"
# scope = "openid address web-origins roles profile phone email microprofile-jwt offline_access"
scope = "openid"

## Client setting
client_id = "oauth2proxy"
client_secret = "r4jwmwLU4GEsf53TnGkqJWfNtAdwWhqU"
redirect_url = "http://oauth2proxy.localhost.com:4180/oauth2/callback"

skip_oidc_discovery = false
# login_url = "http://keycloak.localhost.com:8080/auth/realms/dev_oauth2proxy/protocol/openid-connect/auth"
# redeem_url = "http://keycloak.localhost.com:8080/auth/realms/dev_oauth2proxy/protocol/openid-connect/token"
# profile_url = "http://keycloak.localhost.com:8080/auth/realms/dev_oauth2proxy/protocol/openid-connect/userinfo"
# validate_url = "http://keycloak.localhost.com:8080/auth/realms/dev_oauth2proxy/protocol/openid-connect/userinfo"

## Keycloak client setting
# keycloak_group=<first_allowed_user_group>
# keycloak_group=<second_allowed_user_group>

## TLS Settings
#tls_cert_file = "/opt/oauth2proxy/x509/tls.crt"
#tls_key_file = "/opt/oauth2proxy/x509/tls.key"

## the http url(s) of the upstream endpoint. If multiple, routing is based on path
upstreams = [
    "http://pymocserver.localhost.com:8000/"
]

## Logging configuration
# logging_filename = "/opt/oauth2proxy/log/log.txt"
logging_max_size = 100
logging_max_age = 7
logging_local_time = true
logging_compress = false
standard_logging = true
standard_logging_format = "[{{.Timestamp}}] [{{.File}}] {{.Message}}"
request_logging = true
request_logging_format = "{{.Client}} - {{.Username}} [{{.Timestamp}}] {{.Host}} {{.RequestMethod}} {{.Upstream}} {{.RequestURI}} {{.Protocol}} {{.UserAgent}} {{.StatusCode}} {{.ResponseSize}} {{.RequestDuration}}"
auth_logging = true
auth_logging_format = "{{.Client}} - {{.Username}} [{{.Timestamp}}] [{{.Status}}] {{.Message}}"


## Email Domains to allow authentication for (this authorizes any email on this domain)
## for more granular authorization use `authenticated_emails_file`
## To authorize any email addresses use "*"
email_domains = [
    "*",
]

## Pass OIDC IDToken to upstream via Authorization Bearer header
pass_authorization_header = true

## Pass OAuth Access token to upstream via "X-Forwarded-Access-Token"
pass_access_token = true

## Pass the request Host Header to upstream
pass_host_header = true

## Pass X-Forwarded-User, X-Forwarded-Groups, X-Forwarded-Email and X-Forwarded-Preferred-Username information to upstream
pass_user_headers = true

# Pass HTTP Basic Auth, X-Forwarded-User, X-Forwarded-Email and X-Forwarded-Preferred-Username information to upstream
pass_basic_auth = true

## Authenticated Email Addresses File (one email per line)
# authenticated_emails_file = ""

## Htpasswd File (optional)
## Additionally authenticate against a htpasswd file. Entries must be created with "htpasswd -B" for bcrypt encryption
## enabling exposes a username/login signin form
htpasswd_file = "/opt/oauth2proxy/basic/htpasswd.txt"

## Use resource server mode
skip_jwt_bearer_tokens = true

## bypass authentication for requests that match the method & path. Format: method=path_regex OR path_regex alone for all methods
skip_auth_routes = [
  "/public/.*"
]

## Templates
## optional directory with custom sign_in.html and error.html
# custom_templates_dir = ""

## skip SSL checking for HTTPS requests
ssl_insecure_skip_verify = true
ssl_upstream_insecure_skip_verify = true

## Force JSON errors instead of HTTP error pages or redirects
# force_json_errors = true

## show detailed error information on error pages (WARNING: this may contain sensitive information - do not use in production)
show_debug_on_error = true

## Cookie Settings
## Name     - the cookie name
## Secret   - the seed string for secure cookies; should be 16, 24, or 32 bytes
##            for use with an AES cipher when cookie_refresh or pass_access_token
##            is set
## Domain   - (optional) cookie domain to force cookies to (ie: .yourcompany.com)
## Expire   - (duration) expire timeframe for cookie
## Refresh  - (duration) refresh the cookie when duration has elapsed after cookie was initially set.
##            Should be less than cookie_expire; set to 0 to disable.
##            On refresh, OAuth token is re-validated.
##            (ie: 1h means tokens are refreshed on request 1hr+ after it was set)
## Secure   - secure cookies are only sent by the browser of a HTTPS connection (recommended)
## HttpOnly - httponly cookies are not readable by javascript (recommended)
cookie_name = "_oauth2_proxy"
cookie_expire = "2m"
cookie_refresh = "1m"
cookie_secret = "1234567890123456"
cookie_secure = false
cookie_httponly = false
cookie_samesite = ""
cookie_path = "/"
cookie_domains = [
    ".localhost.com",
]
# whitelist_domains = [
#     ".localhost.com",
# ]

## strip OAuth tokens from cookie session stores if they aren't needed (cookie session store only)
session_cookie_minimal = false
